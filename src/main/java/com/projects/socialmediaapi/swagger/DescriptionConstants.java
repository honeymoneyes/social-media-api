package com.projects.socialmediaapi.swagger;

public class DescriptionConstants {
    public static final String FEED_TAG_DESCRIPTION = """
            API предоставляет доступ к персонализированной ленте новостей,
            где вы найдете последние обновления от пользователей, на которых вы подписаны.
            Пагинация позволит вам удобно перемещаться по контенту, а сортировка даст
            возможность настроить порядок отображения записей для того, чтобы наиболее
            актуальные из них были видны в начале списка.
            Для доступа к этому API необходимо использовать токен аутентификации Bearer.
            """;

    public static final String MESSAGE_TAG_DESCRIPTION = """
            API обеспечивает управление обменом текстовыми сообщениями между авторизованными
            пользователями. Он предоставляет функциональность для отправки и получения текстовых
            сообщений, а также для просмотра истории сообщений в рамках чатов между пользователями.
            API позволяет авторизованным пользователям взаимодействовать через сообщения,
            создавать историю диалогов, а также просматривать уже отправленные текстовые сообщения.
            При помощи данного контроллера пользователи могут поддерживать общение и обмениваться
            информацией в удобной форме, повышая взаимодействие и связь внутри системы.
            Сообщения идут в порядке отправки.
            Для доступа к этому API необходимо использовать токен аутентификации Bearer.
            """;

    public static final String AUTH_TAG_DESCRIPTION = """
            API аутентификации и управления токенами аутентификации.
            Данный контроллер предоставляет возможности для регистрации
            новых пользователей, входа в систему и обновления токенов
            аутентификации. Для доступа к операциям этого контроллера
            не требуется предоставлять токен аутентификации Bearer.
            """;

    public static final String FRIENDSHIP_TAG_DESCRIPTION = """
            API управления друзьями и подписчиками пользователей.
            Этот контроллер предоставляет возможности для просмотра
            списка друзей и подписчиков пользователя, а также для
            управления дружбой и подписками. Для доступа к операциям
            в этом контроллере требуется предоставить токен аутентификации Bearer.
            """;

    public static final String POST_TAG_DESCRIPTION = """
            API управления и просмотра постов пользователей.
            Данный контроллер предоставляет функциональность
            для просмотра всех постов пользователя по его ID,
            просмотра изображения поста по ID, создания новых постов,
            а также обновления и удаления существующих постов.
            Для доступа к операциям в этом контроллере требуется
            предоставить токен аутентификации Bearer.
            """;

    public static final String AUTH_SIGN_UP_DESCRIPTION = """
            Требование: Пользователь должен предоставить имя.
            Требование: Пользователь должен предоставить действующий
            и уникальный адрес электронной почты при регистрации и входе в систему.
            Ограничения: Должен соответствовать стандартным форматам адресов электронной почты.
            Требование: Пользователь должен предоставить пароль при регистрации и входе в систему.
            Ограничения: Пароль должен соответствовать определенным стандартам безопасности,
            таким как минимальная длина, использование различных символов, цифр и букв
            в разных регистрах.
            """;

    public static final String AUTH_SIGN_IN_DESCRIPTION = """
            Требование: После успешной аутентификации пользователь предоставляет email и
            для входа и получает как JWT токен, так и refresh токен.
            Описание: JWT токен содержит информацию о пользователе и определенные права доступа.
            Он включается в каждый запрос пользователя для аутентификации.
            Refresh токен: Используется для обновления JWT токена после истечения его срока действия,
            без необходимости повторного ввода учетных данных. Если истекает Refresh токен,
            то нужно перезайти в систему. Чтобы получить новый JWT токен, нужно в метод Refresh,
            передать - Refresh token.
            """;

    public static final String AUTH_REFRESH_DESCRIPTION = """
            Метод предоставляет возможность пользователю обновить свои аутентификационные
            токены без необходимости повторного ввода учетных данных. Этот метод использует refresh
            токен, который выдается пользователю вместе с JWT токеном после успешной аутентификации.
            После истечения срока действия JWT токена, пользователь может отправить запрос на метод
            "refresh" и предоставить действующий refresh токен в теле запроса. Сервер проверяет
            валидность refresh токена и в случае успеха генерирует новый JWT токен с обновленной
            информацией о пользователе и правами доступа.
            """;

}